/**
 * Verification script for Dark Mode setup
 */

const fs = require('fs');
const path = require('path');

console.log('üåô Dark Mode Setup Verification');
console.log('================================\n');

// Check if next-themes package is installed
const packageJsonPath = path.join(process.cwd(), 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

const hasNextThemes = packageJson.dependencies['next-themes'];

console.log('‚úÖ Package Installation:');
console.log(`   next-themes: ${hasNextThemes || 'Not found'}`);

// Check ThemeProvider component
const themeProviderPath = path.join(process.cwd(), 'src/components/ThemeProvider.tsx');
const hasThemeProvider = fs.existsSync(themeProviderPath);

console.log('\n‚úÖ Theme Provider:');
console.log(`   ThemeProvider component: ${hasThemeProvider ? '‚úÖ Found' : '‚ùå Missing'}`);

// Check ThemeToggle component
const themeTogglePath = path.join(process.cwd(), 'src/components/ThemeToggle.tsx');
const hasThemeToggle = fs.existsSync(themeTogglePath);

console.log(`   ThemeToggle component: ${hasThemeToggle ? '‚úÖ Found' : '‚ùå Missing'}`);

// Check layout integration
const layoutPath = path.join(process.cwd(), 'app/layout.tsx');
if (fs.existsSync(layoutPath)) {
  const layoutContent = fs.readFileSync(layoutPath, 'utf8');
  
  const hasThemeProviderImport = layoutContent.includes('ThemeProvider');
  const hasSupressHydration = layoutContent.includes('suppressHydrationWarning');
  
  console.log('\n‚úÖ Layout Integration:');
  console.log(`   ThemeProvider import: ${hasThemeProviderImport ? '‚úÖ Found' : '‚ùå Missing'}`);
  console.log(`   Hydration fix: ${hasSupressHydration ? '‚úÖ Found' : '‚ùå Missing'}`);
} else {
  console.log('\n‚ùå Layout file not found');
}

// Check dashboard integration
const dashboardPath = path.join(process.cwd(), 'src/components/ParkingDashboard.tsx');
if (fs.existsSync(dashboardPath)) {
  const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');
  
  const hasThemeToggleImport = dashboardContent.includes('ThemeToggle');
  const hasThemeToggleComponent = dashboardContent.includes('<ThemeToggle');
  
  console.log('\n‚úÖ Dashboard Integration:');
  console.log(`   ThemeToggle import: ${hasThemeToggleImport ? '‚úÖ Found' : '‚ùå Missing'}`);
  console.log(`   ThemeToggle component: ${hasThemeToggleComponent ? '‚úÖ Found' : '‚ùå Missing'}`);
}

console.log('\nüé® Dark Mode Features:');
console.log('   ‚Ä¢ Toggle between Light, Dark, and System themes');
console.log('   ‚Ä¢ Smooth transitions between theme changes');
console.log('   ‚Ä¢ Persistent theme preference (localStorage)');
console.log('   ‚Ä¢ System preference detection');
console.log('   ‚Ä¢ Hydration-safe implementation');
console.log('   ‚Ä¢ Icons animate during theme switch');

console.log('\nüéØ User Experience:');
console.log('   ‚Ä¢ Theme toggle in dashboard header');
console.log('   ‚Ä¢ Theme toggle in system status page');
console.log('   ‚Ä¢ Consistent dark mode across all components');
console.log('   ‚Ä¢ shadcn/ui components automatically adapt');
console.log('   ‚Ä¢ Tailwind dark: classes work seamlessly');

console.log('\nüöÄ How to Use:');
console.log('   1. Look for the sun/moon icon in the top-right corner');
console.log('   2. Click to toggle between light and dark modes');
console.log('   3. Theme preference is automatically saved');
console.log('   4. Respects system dark mode preference by default');

const allGood = hasNextThemes && hasThemeProvider && hasThemeToggle;

if (allGood) {
  console.log('\nüéâ Dark Mode is properly configured!');
  console.log('üåô Students can now use the parking dashboard in their preferred theme!');
} else {
  console.log('\n‚ö†Ô∏è  Setup incomplete. Please check the issues above.');
}
